-Do glm::vec2/3 in lua API
-Put bindings in all of the classes instead of in Script?
-Trasnparency (PROBABLY NOT! Unless we have one layer of transparency or something)? Sound?

-Write a template container and keep those instances instead of a bunch of maps in ResourceManager? Maybe not, since we have factories there, too.

-USE UNIFORM BLOCK FOR LIGHTS?
-Give lightSSSS to shader + don't care about lights that are too far away
- CHECK FOR ONSTATE BEFORE SENDING!
->>> Maybe give mLights to ShadedObject? Shared pointer? Reference?
->>>>>> Uniform block thing: http://www.geeks3d.com/20140704/gpu-buffers-introduction-to-opengl-3-1-uniform-buffers-objects/
->>>>> http://stackoverflow.com/questions/7954927/glsl-passing-a-list-of-values-to-fragment-shader

-Don't make uniforms obligatory

-Get rid of key inits and resources and all in Game::initMainLoop() (FROM LUA!!!)

-Colision detection (in Entity step function?) - Either point or box (and add collision on and off):
---Generate hitboxes: for now, only AABB (axis-aligned) square 2d (topdown) hitboxes!! REMEMBER THAT SCALING AFFECTS THIS AND MAY REQUIRE RECREATING THE HITBOX!

-A Window class instead of functions in Game? It's fine for now, maybe an SDL window is enough.
-Load all files at the same place?

-Update to VS 2015 to:
->>Update arrays (uniforms and keys) to std::arrays(VS2012 doesn't supprt list initializations {} so I am keeping normal arrays for now)
->>'using' instead of typedef!

-No need of particles, but billboards would be useful for trees, see tutorial 18. Call them sprites.

-Settings class? Include max fps, field of view and resolution
--->> Can the field of view be anything else than numbers power of ten?

-Level editor? (specifying textures, probably not shaders) TRY USING BLENDER! - multiple objects per .obj (use tiny loader)
->>>> CHECK OUT TUTORIAL 15 lightmaps! It talks about that (obj, etc) = join all objects
--INFO: Lightmap = texture
--When joining objects, they will still be independant in the engine (only if I split all objects using tinyloader)
--1 uv map, and you can have 1 texture!!!
--THIS IS AWESOME!!! YOU COULD MAKE YOUR WHOLE LEVEL IN BLENDER, AND SAVE AS .obj and 1 texture with fancy static shadows! You can write a script to program roads or whatever. You can split the level into multiple texturs (for example, buildings and floor tiles etc)


-3d animations: Going with mesh keyframes fro now: blender! Export multiple .obj, I know. Then interpolate the meshes.
------------------------------------
-Do something with v-sync like that the frame rate doesn't drop to 30?

-Support events in input and have handleInput() in Game

------------------------------------

-Advanced tutorials:
-2D Text (+2d textures)

FUTURE:
-Use .mtl material files (with ObjectGeometry, check out addObjectGeometryGroup())
->>> .mtl can specify textures!

-Dynamic shadows (static shadows are made in 3d modeling program)
-Give lua access to gravity and projection?
-Support objects rotation (method for recalcultating an object's Box2D shape)

-Write a template container and keep those instances instead of a bunch of maps in ResourceManager. Add the ability to duplicate resources in this container!

-USE UNIFORM BLOCK FOR LIGHTS?
-Give lightSSSS to shader + don't care about lights that are too far away
- CHECK FOR ONSTATE BEFORE SENDING!
->>> Maybe give mLights to ShadedObject? Shared pointer? Reference?
->>>>>> Uniform block thing: http://www.geeks3d.com/20140704/gpu-buffers-introduction-to-opengl-3-1-uniform-buffers-objects/
->>>>> http://stackoverflow.com/questions/7954927/glsl-passing-a-list-of-values-to-fragment-shader

-Don't make uniforms obligatory
-Work on CMake lists to make adding libraries easier and other things.
-Get rid of key inits and resources and all in Game::initMainLoop() (FROM LUA!!!)
-Render to texture, so we can have some awesome effects!
-When a C++ error happens (that is caught), crash() it with the Lua line (when it is called from Lua)!
-Give Lua access to input events?

-Colision detection (in Entity step function?) - Either point or box (and add collision on and off):
---Generate hitboxes: for now, only AABB (axis-aligned) square 2d (topdown) hitboxes!! REMEMBER THAT SCALING AFFECTS THIS AND MAY REQUIRE RECREATING THE HITBOX!

-A Window class instead of functions in Game? It's fine for now, maybe an SDL window is enough.
-Load all files at the same place?

-Settings class? Include max fps, field of view and resolution
--->> Can the field of view be anything else than numbers power of ten?


-3d animations: Going with mesh keyframes fro now: blender! Export in one .obj. Then interpolate the meshes.
------------------------------------
-Do something with v-sync like that the frame rate doesn't drop to 30?

-Support events in input and have handleInput() in Game

------------------------------------

-Advanced tutorials:
-2D Text (+2d textures)

FUTURE:
- Use .mtl material files (with ObjectGeometry, check out addObjectGeometryGroup())
->>> .mtl can specify textures!

- Transparency

-Dynamic shadows (static shadows are made in 3d modeling program)